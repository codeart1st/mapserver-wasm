diff --git a/alg/CMakeLists.txt b/alg/CMakeLists.txt
index fe008aa606..8b3d3bf159 100644
--- a/alg/CMakeLists.txt
+++ b/alg/CMakeLists.txt
@@ -51,7 +51,7 @@ target_compile_options(alg PRIVATE $<$<COMPILE_LANGUAGE:CXX>:${GDAL_CXX_WARNING_
 target_compile_options(alg PRIVATE $<$<COMPILE_LANGUAGE:C>:${GDAL_C_WARNING_FLAGS}>)
 
 target_include_directories(
-  alg PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/marching_squares> $<TARGET_PROPERTY:gdal_GTIFF,SOURCE_DIR>
+  alg PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/marching_squares>
               $<TARGET_PROPERTY:gdal_vrt,SOURCE_DIR> $<TARGET_PROPERTY:gdal_MEM,SOURCE_DIR>)
 set_property(TARGET alg PROPERTY POSITION_INDEPENDENT_CODE ${GDAL_OBJECT_LIBRARIES_POSITION_INDEPENDENT_CODE})
 target_sources(${GDAL_LIB_TARGET_NAME} PRIVATE $<TARGET_OBJECTS:alg>)
diff --git a/cmake/helpers/CheckDependentLibraries.cmake b/cmake/helpers/CheckDependentLibraries.cmake
index 6f9ee274bf..af103ffec7 100644
--- a/cmake/helpers/CheckDependentLibraries.cmake
+++ b/cmake/helpers/CheckDependentLibraries.cmake
@@ -409,14 +409,6 @@ if ("${PROJ_VERSION}" VERSION_LESS "6.3")
     message(FATAL_ERROR "PROJ >= 6.3 required. Version ${PROJ_VERSION} found")
 endif()
 
-gdal_check_package(TIFF "Support for the Tag Image File Format (TIFF)." VERSION 4.1 CAN_DISABLE)
-set_package_properties(
-  TIFF PROPERTIES
-  URL "https://libtiff.gitlab.io/libtiff/"
-  DESCRIPTION "Support for the Tag Image File Format (TIFF)."
-  TYPE RECOMMENDED)
-gdal_internal_library(TIFF REQUIRED)
-
 if (DEFINED ENV{CONDA_PREFIX} AND UNIX)
     # Currently on Unix, the Zstd cmake config file is buggy. It declares a
     # libzstd_static target but the corresponding libzstd.a file is missing,
@@ -430,11 +422,6 @@ gdal_check_package(ZSTD "ZSTD compression library" CAN_DISABLE ${ZSTD_NAMES_AND_
 gdal_check_package(SFCGAL "gdal core supports ISO 19107:2013 and OGC Simple Features Access 1.2 for 3D operations"
                    CAN_DISABLE)
 
-gdal_check_package(GeoTIFF "libgeotiff library (external)" CAN_DISABLE RECOMMENDED
-  NAMES GeoTIFF
-  TARGETS geotiff_library GEOTIFF::GEOTIFF
-)
-gdal_internal_library(GEOTIFF REQUIRED)
 
 gdal_check_package(PNG "PNG compression library (external)" CAN_DISABLE RECOMMENDED VERSION "1.6")
 gdal_internal_library(PNG)
diff --git a/frmts/CMakeLists.txt b/frmts/CMakeLists.txt
index fc9787f958..87df879313 100644
--- a/frmts/CMakeLists.txt
+++ b/frmts/CMakeLists.txt
@@ -34,10 +34,7 @@ include(CMakeDependentOption)
 gdal_dependent_format(jpeg "JPEG image format" "GDAL_USE_JPEG OR GDAL_USE_JPEG_INTERNAL")
 
 # base driver provide frmt core functions
-gdal_optional_format(raw "Raw formats:EOSAT FAST Format, FARSITE LCP and Vexcel MFF2 Image")
 # JPEG must be defined before GTiff
-gdal_format(gtiff "GeoTIFF image format")
-set_package_properties(TIFF PROPERTIES PURPOSE "gdal_GTIFF: GeoTIFF image format")
 gdal_format(mem "Read/write data in Memory")
 gdal_format(vrt "Virtual GDAL Datasets")
 # Note: derived is derived of vrt
@@ -49,125 +46,10 @@ if (CMAKE_BUILD_TYPE MATCHES "Debug" OR GDAL_ENABLE_DRIVER_NULL)
   gdal_optional_format(null "NULL dummy driver")
 endif ()
 
-gdal_format(hfa "Erdas Imagine .img")
-gdal_optional_format(sdts "SDTS translator")
-gdal_optional_format(nitf "National Imagery Transmission Format")
-gdal_optional_format(gxf "GXF")
-gdal_optional_format(aaigrid "Arc/Info ASCII Grid Format.")
-gdal_optional_format(ceos "CEOS translator")
-gdal_optional_format(ceos2 "ASI CEOS translator" DRIVER_NAME_OPTION "SAR_CEOS")
-gdal_optional_format(xpm "XPM image format")
-gdal_optional_format(dted "Military Elevation Data")
-gdal_optional_format(jdem "JDEM driver")
-gdal_optional_format(envisat "Envisat")
-gdal_optional_format(elas "Earth Resources Laboratory Applications Software")
-gdal_optional_format(fit "FIT driver")
-gdal_optional_format(l1b "NOAA Polar Orbiter Level 1b Data Set (AVHRR)")
-gdal_optional_format(rs2 "RS2 -- RadarSat 2 XML Product")
-gdal_optional_format(ilwis "Raster Map")
-gdal_optional_format(rmf "RMF --- Raster Matrix Format")
-gdal_optional_format(leveller "Daylon Leveller heightfield")
-gdal_optional_format(sgi "SGI Image driver")
-gdal_optional_format(srtmhgt "SRTM HGT File Read Support")
-gdal_optional_format(idrisi "Idrisi Raster Format")
-gdal_optional_format(gsg "Implements the Golden Software Surfer 7 Binary Grid Format.")
-gdal_optional_format(ers "ERMapper .ERS")
-gdal_optional_format(jaxapalsar "JAXA PALSAR Level 1.1 and Level 1.5 processed products support")
-gdal_optional_format(dimap "SPOT Dimap Driver")
-gdal_optional_format(gff "Ground-based SAR Applitcations Testbed File Format driver")
-gdal_optional_format(cosar "COSAR -- TerraSAR-X Complex SAR Data Product")
-gdal_optional_format(pds "USGS Astrogeology ISIS Cube (Version 2)")
-gdal_optional_format(adrg "ADRG reader and ASRP/USRP Reader")
-gdal_optional_format(coasp "DRDC Configurable Airborne SAR Processor (COASP) data reader")
-gdal_optional_format(tsx "TerraSAR-X XML Product Support")
-gdal_optional_format(terragen "Terragen&trade; Terrain File")
-gdal_optional_format(blx "Magellan BLX Topo File Format")
-gdal_optional_format(msgn "Meteosat Second Generation (MSG) Native Archive Format (.nat)")
-gdal_optional_format(til "EarthWatch .TIL Driver")
-gdal_optional_format(r "R Object Data Store")
-gdal_optional_format(northwood "NWT_GRD/NWT_GRC -- Northwood/Vertical Mapper File Format")
-gdal_optional_format(saga "SAGA GIS Binary Driver")
-gdal_optional_format(xyz "ASCII Gridded XYZ")
-gdal_dependent_format(heif "HEIF" "GDAL_USE_HEIF")
-gdal_optional_format(esric "ESRI compact cache")
-gdal_optional_format(hf2 "HF2/HFZ heightfield raster")
-gdal_optional_format(kmlsuperoverlay "")
-gdal_optional_format(ctg "CTG driver")
-gdal_optional_format(zmap "ZMAP")
-gdal_optional_format(ngsgeoid "NOAA NGS Geoid Height Grids")
-gdal_optional_format(iris "IRIS driver")
-gdal_optional_format(map "OziExplorer .MAP")
-gdal_optional_format(cals "CALS type 1")
-set_package_properties(TIFF PROPERTIES PURPOSE "gdal_CALS: CALS type 1 driver")
-gdal_optional_format(safe "SAFE -- Sentinel-1 SAFE XML Product")
-gdal_optional_format(sentinel2 "Driver for Sentinel-2 Level-1B, Level-1C and Level-2A products.")
-gdal_optional_format(prf "PHOTOMOD Raster File")
-gdal_optional_format(mrf "Meta raster format")
-gdal_optional_format(wmts "OGC Web Map Tile Service")
-gdal_optional_format(grib "WMO General Regularly-distributed Information in Binary form")
-gdal_optional_format(bmp "Microsoft Windows Device Independent Bitmap")
-gdal_optional_format(tga "TGA")
-gdal_optional_format(stacta "STACTA")
-
-# optional Formats
-gdal_optional_format(bsb "Maptech/NOAA BSB Nautical Chart Format")
-gdal_dependent_format(aigrid "Arc/Info Binary Grid Format" "OGR_ENABLE_DRIVER_AVC")
-gdal_optional_format(usgsdem "USGS ASCII DEM (and CDED)")
-gdal_optional_format(airsar "AirSAR Polarimetric Format")
-gdal_optional_format(ozi "OZF2/OZFX3 raster")
-gdal_optional_format(pcidsk "PCI Geomatics Database File")
-gdal_optional_format(sigdem "Scaled Integer Gridded DEM .sigdem Driver")
-gdal_dependent_format(msg "Meteosat Second Generation" "GDAL_USE_PUBLICDECOMPWT")
-gdal_optional_format(rik "RIK -- Swedish Grid Maps")
-gdal_optional_format(stacit "STACIT")
-gdal_optional_format(pdf "Geospatial PDF") # write only if none of GDAL_USE_POPPLER, GDAL_USE_PODOFO or GDAL_USE_PDFIUM
-                                           # is set
-
 # formats with external library dependency
 gdal_dependent_format(png "PNG image format" "GDAL_USE_PNG OR GDAL_USE_PNG_INTERNAL")
-gdal_dependent_format(gif "Graphics Interchange Format" "GDAL_USE_GIF OR GDAL_USE_GIF_INTERNAL")
-
-gdal_dependent_format(wcs "OGC Web Coverage Service" "GDAL_USE_CURL")
-gdal_dependent_format(http "HTTP driver" "GDAL_USE_CURL")
-
-gdal_dependent_format(netcdf "NetCDF network Common Data Form" "GDAL_USE_NETCDF")
-gdal_optional_format(zarr "ZARR")
-gdal_dependent_format(daas "Airbus DS Intelligence Data As A Service(DAAS)" "GDAL_USE_CURL")
-gdal_dependent_format(eeda "Earth Engine Data API" "GDAL_USE_CURL")
-gdal_dependent_format(fits "FITS Driver" "GDAL_USE_CFITSIO")
-gdal_dependent_format(hdf5 "Hierarchical Data Format Release 5 (HDF5)" "GDAL_USE_HDF5")
-gdal_dependent_format(plmosaic "PLMosaic (Planet Labs Mosaics API)" "GDAL_USE_CURL")
-gdal_dependent_format(wms "Web Map Services" "GDAL_USE_CURL")
-gdal_dependent_format(ogcapi "OGCAPI" "GDAL_USE_CURL")
-gdal_dependent_format(gta "Generic Tagged Arrays" "GDAL_USE_GTA")
-gdal_dependent_format(webp "WebP" "GDAL_USE_WEBP")
-gdal_dependent_format(hdf4 "Hierarchical Data Format Release 4 (HDF4)" "GDAL_USE_HDF4")
-gdal_dependent_format(rasterlite "Rasterlite - Rasters in SQLite DB" "GDAL_USE_SQLITE3;OGR_ENABLE_DRIVER_SQLITE")
-gdal_dependent_format(mbtiles "MBTile" "GDAL_USE_SQLITE3;OGR_ENABLE_DRIVER_GPKG;OGR_ENABLE_DRIVER_MVT")
-gdal_dependent_format(postgisraster "PostGIS Raster driver" "GDAL_USE_POSTGRESQL")
-gdal_dependent_format(dds "DirectDraw Surface" "GDAL_USE_CRNLIB")
-gdal_dependent_format(kea "Kea" "GDAL_USE_KEA;GDAL_USE_HDF5")
 gdal_dependent_format(openjpeg "JPEG2000 driver based on OpenJPEG library" "GDAL_USE_OPENJPEG" DRIVER_NAME_OPTION
                       "JP2OpenJPEG")
-gdal_dependent_format(tiledb "TileDB tiledb.io" "GDAL_USE_TILEDB")
-gdal_dependent_format(exr "EXR support via OpenEXR library" "GDAL_USE_OPENEXR")
-gdal_dependent_format(pcraster "PCRaster CSF 2.0 raster file driver" "GDAL_USE_LIBCSF OR GDAL_USE_LIBCSF_INTERNAL")
-gdal_dependent_format(rdb "RIEGL RDB Map Pixel (.mpx) driver" "rdb_FOUND")
-gdal_dependent_format(jpegxl "JPEG-XL" "GDAL_USE_JXL")
-gdal_dependent_format(basisu_ktx2 "Basis Universal and KTX2 texture formats" "GDAL_USE_BASISU")
-
-# ######################################################################################################################
-# driver with proprietary libraries Kakadu software SDK
-gdal_dependent_format(jp2kak "JPEG-2000 (based on Kakadu)" "GDAL_USE_KDU")
-gdal_dependent_format(jpipkak "JPIP Streaming" "GDAL_USE_KDU")
-# Luratech SDK
-gdal_dependent_format(jp2lura "JPEG-2000 (based on Luratech)" "GDAL_USE_LURATECH")
-# ESRI ArcSDE C API SDK
-gdal_dependent_format(sde "ESRI ArcSDE Raster" "HAVE_SDE")
-# LizardTech's decoding software development kit (DSDK)
-gdal_dependent_format(mrsid "Multi-resolution Seamless Image Database" "GDAL_USE_MRSID")
-gdal_dependent_format(georaster "Oracle Spatial GeoRaster" "GDAL_USE_ORACLE" DRIVER_NAME_OPTION GEOR)
-gdal_dependent_format(ecw "ERDAS JPEG2000 (.jp2)" "GDAL_USE_ECW")
 
 # Register all frmt drivers according to FRMT_<driver> flags
 gdal_standard_includes(gdal_frmts)
diff --git a/gcore/CMakeLists.txt b/gcore/CMakeLists.txt
index f8258bbdec..4981effb38 100644
--- a/gcore/CMakeLists.txt
+++ b/gcore/CMakeLists.txt
@@ -68,7 +68,7 @@ target_compile_options(gcore PRIVATE ${GDAL_CXX_WARNING_FLAGS} ${WFLAG_OLD_STYLE
 target_include_directories(
   gcore
   PRIVATE $<TARGET_PROPERTY:ogrsf_generic,SOURCE_DIR> $<TARGET_PROPERTY:ogr_geojson,SOURCE_DIR>
-          $<TARGET_PROPERTY:gdal_GTIFF,SOURCE_DIR> $<TARGET_PROPERTY:gdal_MEM,SOURCE_DIR>
+          $<TARGET_PROPERTY:gdal_MEM,SOURCE_DIR>
           $<TARGET_PROPERTY:gdal_vrt,SOURCE_DIR>)
 set_property(TARGET gcore PROPERTY POSITION_INDEPENDENT_CODE ${GDAL_OBJECT_LIBRARIES_POSITION_INDEPENDENT_CODE})
 
diff --git a/gcore/gdaljp2metadata.cpp b/gcore/gdaljp2metadata.cpp
index 139c6940c2..b50c537b41 100644
--- a/gcore/gdaljp2metadata.cpp
+++ b/gcore/gdaljp2metadata.cpp
@@ -52,7 +52,6 @@
 #include "cpl_string.h"
 #include "cpl_minixml.h"
 #include "gdaljp2metadatagenerator.h"
-#include "gt_wkt_srs_for_gdal.h"
 #include "ogr_api.h"
 #include "ogr_core.h"
 #include "ogr_geometry.h"
@@ -575,126 +574,6 @@ int GDALJP2Metadata::ReadBoxes(VSILFILE *fpVSIL)
     return TRUE;
 }
 
-/************************************************************************/
-/*                          ParseJP2GeoTIFF()                           */
-/************************************************************************/
-
-int GDALJP2Metadata::ParseJP2GeoTIFF()
-
-{
-    if (!CPLTestBool(CPLGetConfigOption("GDAL_USE_GEOJP2", "TRUE")))
-        return FALSE;
-
-    bool abValidProjInfo[MAX_JP2GEOTIFF_BOXES] = {false};
-    OGRSpatialReferenceH ahSRS[MAX_JP2GEOTIFF_BOXES] = {nullptr};
-    double aadfGeoTransform[MAX_JP2GEOTIFF_BOXES][6];
-    int anGCPCount[MAX_JP2GEOTIFF_BOXES] = {0};
-    GDAL_GCP *apasGCPList[MAX_JP2GEOTIFF_BOXES] = {nullptr};
-    int abPixelIsPoint[MAX_JP2GEOTIFF_BOXES] = {0};
-    char **apapszRPCMD[MAX_JP2GEOTIFF_BOXES] = {nullptr};
-
-    const int nMax = std::min(nGeoTIFFBoxesCount, MAX_JP2GEOTIFF_BOXES);
-    for (int i = 0; i < nMax; ++i)
-    {
-        /* --------------------------------------------------------------------
-         */
-        /*      Convert raw data into projection and geotransform. */
-        /* --------------------------------------------------------------------
-         */
-        aadfGeoTransform[i][0] = 0;
-        aadfGeoTransform[i][1] = 1;
-        aadfGeoTransform[i][2] = 0;
-        aadfGeoTransform[i][3] = 0;
-        aadfGeoTransform[i][4] = 0;
-        aadfGeoTransform[i][5] = 1;
-        if (GTIFWktFromMemBufEx(pasGeoTIFFBoxes[i].nGeoTIFFSize,
-                                pasGeoTIFFBoxes[i].pabyGeoTIFFData, &ahSRS[i],
-                                aadfGeoTransform[i], &anGCPCount[i],
-                                &apasGCPList[i], &abPixelIsPoint[i],
-                                &apapszRPCMD[i]) == CE_None)
-        {
-            if (ahSRS[i] != nullptr)
-                abValidProjInfo[i] = true;
-        }
-    }
-
-    // Detect which box is the better one.
-    int iBestIndex = -1;
-    for (int i = 0; i < nMax; ++i)
-    {
-        if (abValidProjInfo[i] && iBestIndex < 0)
-        {
-            iBestIndex = i;
-        }
-        else if (abValidProjInfo[i] && ahSRS[i] != nullptr)
-        {
-            // Anything else than a LOCAL_CS will probably be better.
-            if (OSRIsLocal(ahSRS[iBestIndex]))
-                iBestIndex = i;
-        }
-    }
-
-    if (iBestIndex < 0)
-    {
-        for (int i = 0; i < nMax; ++i)
-        {
-            if (aadfGeoTransform[i][0] != 0 || aadfGeoTransform[i][1] != 1 ||
-                aadfGeoTransform[i][2] != 0 || aadfGeoTransform[i][3] != 0 ||
-                aadfGeoTransform[i][4] != 0 || aadfGeoTransform[i][5] != 1 ||
-                anGCPCount[i] > 0 || apapszRPCMD[i] != nullptr)
-            {
-                iBestIndex = i;
-            }
-        }
-    }
-
-    if (iBestIndex >= 0)
-    {
-        m_oSRS.Clear();
-        if (ahSRS[iBestIndex])
-            m_oSRS = *(OGRSpatialReference::FromHandle(ahSRS[iBestIndex]));
-        m_oSRS.SetAxisMappingStrategy(OAMS_TRADITIONAL_GIS_ORDER);
-        memcpy(adfGeoTransform, aadfGeoTransform[iBestIndex],
-               6 * sizeof(double));
-        nGCPCount = anGCPCount[iBestIndex];
-        pasGCPList = apasGCPList[iBestIndex];
-        bPixelIsPoint = CPL_TO_BOOL(abPixelIsPoint[iBestIndex]);
-        papszRPCMD = apapszRPCMD[iBestIndex];
-
-        if (adfGeoTransform[0] != 0 || adfGeoTransform[1] != 1 ||
-            adfGeoTransform[2] != 0 || adfGeoTransform[3] != 0 ||
-            adfGeoTransform[4] != 0 || adfGeoTransform[5] != 1)
-            bHaveGeoTransform = true;
-
-        if (ahSRS[iBestIndex])
-        {
-            char *pszWKT = nullptr;
-            m_oSRS.exportToWkt(&pszWKT);
-            CPLDebug("GDALJP2Metadata",
-                     "Got projection from GeoJP2 (geotiff) box (%d): %s",
-                     iBestIndex, pszWKT ? pszWKT : "(null)");
-            CPLFree(pszWKT);
-        }
-    }
-
-    // Cleanup unused boxes.
-    for (int i = 0; i < nMax; ++i)
-    {
-        if (i != iBestIndex)
-        {
-            if (anGCPCount[i] > 0)
-            {
-                GDALDeinitGCPs(anGCPCount[i], apasGCPList[i]);
-                CPLFree(apasGCPList[i]);
-            }
-            CSLDestroy(apapszRPCMD[i]);
-        }
-        OSRDestroySpatialReference(ahSRS[i]);
-    }
-
-    return iBestIndex >= 0;
-}
-
 /************************************************************************/
 /*                             ParseMSIG()                              */
 /************************************************************************/
@@ -1218,65 +1097,6 @@ void GDALJP2Metadata::SetRPCMD(char **papszRPCMDIn)
     papszRPCMD = CSLDuplicate(papszRPCMDIn);
 }
 
-/************************************************************************/
-/*                          CreateJP2GeoTIFF()                          */
-/************************************************************************/
-
-GDALJP2Box *GDALJP2Metadata::CreateJP2GeoTIFF()
-
-{
-    /* -------------------------------------------------------------------- */
-    /*      Prepare the memory buffer containing the degenerate GeoTIFF     */
-    /*      file.                                                           */
-    /* -------------------------------------------------------------------- */
-    int nGTBufSize = 0;
-    unsigned char *pabyGTBuf = nullptr;
-
-    if (GTIFMemBufFromSRS(OGRSpatialReference::ToHandle(&m_oSRS),
-                          adfGeoTransform, nGCPCount, pasGCPList, &nGTBufSize,
-                          &pabyGTBuf, bPixelIsPoint, papszRPCMD) != CE_None)
-        return nullptr;
-
-    if (nGTBufSize == 0)
-        return nullptr;
-
-    /* -------------------------------------------------------------------- */
-    /*      Write to a box on the JP2 file.                                 */
-    /* -------------------------------------------------------------------- */
-    GDALJP2Box *poBox;
-
-    poBox = GDALJP2Box::CreateUUIDBox(msi_uuid2, nGTBufSize, pabyGTBuf);
-
-    CPLFree(pabyGTBuf);
-
-    return poBox;
-}
-
-/************************************************************************/
-/*                          IsSRSCompatible()                           */
-/************************************************************************/
-
-/* Returns true if the SRS can be references through a EPSG code, or encoded
- * as a GML SRS
- */
-bool GDALJP2Metadata::IsSRSCompatible(const OGRSpatialReference *poSRS)
-{
-    const char *pszAuthName = poSRS->GetAuthorityName(nullptr);
-    const char *pszAuthCode = poSRS->GetAuthorityCode(nullptr);
-
-    if (pszAuthName && pszAuthCode && EQUAL(pszAuthName, "epsg"))
-    {
-        if (atoi(pszAuthCode))
-            return true;
-    }
-
-    CPLErrorStateBackuper oErrorStateBackuper(CPLQuietErrorHandler);
-    char *pszGMLDef = nullptr;
-    const bool bRet = (poSRS->exportToXML(&pszGMLDef, nullptr) == OGRERR_NONE);
-    CPLFree(pszGMLDef);
-    return bRet;
-}
-
 /************************************************************************/
 /*                     GetGMLJP2GeoreferencingInfo()                    */
 /************************************************************************/
diff --git a/gdal.cmake b/gdal.cmake
index 54cfbe13af..c7ca3338a4 100644
--- a/gdal.cmake
+++ b/gdal.cmake
@@ -548,8 +548,6 @@ if(OGR_ENABLE_DRIVER_GPKG AND
 endif()
 
 # We need to forward declare a few OGR drivers because raster formats need them
-option(OGR_ENABLE_DRIVER_AVC "Set ON to build OGR AVC driver" ${OGR_BUILD_OPTIONAL_DRIVERS})
-option(OGR_ENABLE_DRIVER_GML "Set ON to build OGR GML driver" ${OGR_BUILD_OPTIONAL_DRIVERS})
 cmake_dependent_option(OGR_ENABLE_DRIVER_SQLITE "Set ON to build OGR SQLite driver" ${OGR_BUILD_OPTIONAL_DRIVERS}
                        "GDAL_USE_SQLITE3" OFF)
 cmake_dependent_option(OGR_ENABLE_DRIVER_GPKG "Set ON to build OGR GPKG driver" ${OGR_BUILD_OPTIONAL_DRIVERS}
diff --git a/ogr/ogrsf_frmts/CMakeLists.txt b/ogr/ogrsf_frmts/CMakeLists.txt
index f11285935d..7819c19ae6 100644
--- a/ogr/ogrsf_frmts/CMakeLists.txt
+++ b/ogr/ogrsf_frmts/CMakeLists.txt
@@ -13,105 +13,11 @@ add_dependencies(ogrsf_frmts generate_gdal_version_h)
 # Obligatory for building GDAL; always compile in.
 ogr_default_driver(mem "Read/write driver for MEMORY virtual files")
 ogr_default_driver(geojson "GeoJSON/ESRIJSON/TopoJSON driver")
-ogr_default_driver2(mitab TAB "MapInfo TAB and MIF/MID")
-ogr_default_driver(shape "ESRI shape-file")
-
-# ######################################################################################################################
-ogr_default_driver(kml KML) # when not found EXPAT, it use CPL_MINIXML (ex. android)
-ogr_default_driver(vrt "VRT - Virtual Format")
-
-# Caution: if modifying AVC declaration here, also modify it in gdal.cmake
-ogr_optional_driver(avc AVC)
-
-ogr_optional_driver(gml GML) # when not found both EXPAT/XercesC, return error in driver, referenced by WCS
-
-# ######################################################################################################################
-ogr_optional_driver(csv CSV)
-ogr_optional_driver(dgn DGN)
-ogr_optional_driver(gmt GMT)
-ogr_optional_driver(ntf NTF)
-ogr_optional_driver(s57 S57)
-ogr_optional_driver(tiger "U.S. Census TIGER/Line")
-ogr_optional_driver(geoconcept GEOCONCEPT)
-ogr_optional_driver(georss GEORSS)
-ogr_optional_driver(dxf DXF)
-ogr_optional_driver(pgdump PGDump)
-ogr_optional_driver(gpsbabel GPSBABEL)
-ogr_optional_driver(edigeo EDIGEO)
-ogr_optional_driver(sxf SXF)
-ogr_optional_driver(openfilegdb OPENFILEGDB)
-ogr_optional_driver(wasp "WAsP .map format")
-ogr_optional_driver(selafin OSELAFIN)
-ogr_optional_driver(jml JML)
-ogr_optional_driver(vdv "VDV-451/VDV-452/INTREST Data Format")
-ogr_optional_driver(flatgeobuf FlatGeobuf)
-ogr_optional_driver(mapml MapML)
-ogr_optional_driver(jsonfg JSONFG)
-if( NOT WORDS_BIGENDIAN )
-    ogr_optional_driver(miramon "MiraMonVector")
-endif()
-
-# ######################################################################################################################
-#
-
-ogr_dependent_driver(sdts SDTS "GDAL_ENABLE_DRIVER_SDTS")
-
-# XML drivers
-ogr_dependent_driver(gpx "GPX - GPS Exchange Format" "GDAL_USE_EXPAT")
-ogr_dependent_driver(gmlas GMLAS "GDAL_USE_XERCESC;OGR_ENABLE_DRIVER_PGDUMP")
-ogr_dependent_driver(svg "Scalable Vector Graphics" "GDAL_USE_EXPAT")
-ogr_dependent_driver(csw CSW "GDAL_USE_CURL;OGR_ENABLE_DRIVER_GML")
-ogr_dependent_driver(dwg DWG "GDAL_USE_TEIGHA")
-ogr_dependent_driver(filegdb FileGDB "GDAL_USE_FILEGDB")
-ogr_dependent_driver(libkml LibKML "GDAL_USE_LIBKML")
-ogr_dependent_driver(nas "NAS/ALKIS" "GDAL_USE_XERCESC;OGR_ENABLE_DRIVER_GML")
-ogr_dependent_driver(plscenes PLSCENES "GDAL_USE_CURL")
-ogr_dependent_driver(sosi "SOSI:Systematic Organization of Spatial Information" "GDAL_USE_FYBA")
-ogr_dependent_driver(wfs "OGC WFS service" "GDAL_USE_CURL;OGR_ENABLE_DRIVER_GML")
-ogr_dependent_driver(ngw "NextGIS Web" "GDAL_USE_CURL")
-ogr_dependent_driver(elastic "ElasticSearch" "GDAL_USE_CURL")
-
-ogr_dependent_driver(idrisi IDRISI "GDAL_ENABLE_DRIVER_IDRISI")
-
-ogr_dependent_driver(pds "Planetary Data Systems TABLE" "GDAL_ENABLE_DRIVER_PDS;OGR_ENABLE_DRIVER_GML")
 
 # Caution: if modifying SQLite declaration here, also modify it in gdal.cmake
 ogr_dependent_driver(sqlite "SQLite3 / Spatialite RDBMS" "GDAL_USE_SQLITE3")
 # Caution: if modifying GPKG declaration here, also modify it in gdal.cmake
 ogr_dependent_driver(gpkg "GeoPackage" "GDAL_USE_SQLITE3;OGR_ENABLE_DRIVER_SQLITE")
-ogr_dependent_driver(osm "OpenStreetMap XML and PBF" "GDAL_USE_SQLITE3;OGR_ENABLE_DRIVER_SQLITE")
-ogr_dependent_driver(vfk "Czech Cadastral Exchange Data Format" "GDAL_USE_SQLITE3")
-# Caution: if modifying MVT declaration here, also modify it in gdal.cmake
-ogr_dependent_driver(mvt "MVT" "GDAL_USE_SQLITE3")
-ogr_dependent_driver(pmtiles PMTiles "OGR_ENABLE_DRIVER_MVT")
-
-# ODBC/POSTGRES/MYSQL
-ogr_dependent_driver(amigocloud AMIGOCLOUD "GDAL_USE_CURL;OGR_ENABLE_DRIVER_PGDUMP")
-ogr_dependent_driver(carto CARTO "GDAL_USE_CURL;OGR_ENABLE_DRIVER_PGDUMP")
-ogr_dependent_driver(ili ILI "GDAL_USE_XERCESC")
-ogr_dependent_driver(mysql MySQL "GDAL_USE_MYSQL")
-ogr_dependent_driver(pg PostGIS "GDAL_USE_POSTGRESQL;OGR_ENABLE_DRIVER_PGDUMP")
-ogr_dependent_driver(mssqlspatial MSSQLSPATIAL "GDAL_USE_ODBC")
-ogr_dependent_driver(odbc ODBC "GDAL_USE_ODBC")
-ogr_dependent_driver(pgeo "PGEO" "GDAL_USE_ODBC")
-
-ogr_dependent_driver(xlsx "Microsoft Office Excel(xlsx)" "GDAL_USE_EXPAT")
-ogr_dependent_driver(xls "Microsoft Office Excel(xls)" "GDAL_USE_FREEXL")
-ogr_dependent_driver(mongodbv3 "MongoDB V3" "GDAL_USE_MONGOCXX")
-ogr_dependent_driver(cad "OpenCAD" "GDAL_USE_OPENCAD OR GDAL_USE_OPENCAD_INTERNAL")
-ogr_dependent_driver(parquet "Parquet" "GDAL_USE_PARQUET")
-ogr_dependent_driver(arrow "Arrow" "GDAL_USE_ARROW")
-
-ogr_dependent_driver(gtfs "GTFS" "OGR_ENABLE_DRIVER_CSV")
-
-# ######################################################################################################################
-# proprietary libraries
-ogr_dependent_driver(oci "Oracle OCI" "GDAL_USE_ORACLE")
-ogr_dependent_driver(idb "IDB" "GDAL_USE_IDB")
-ogr_dependent_driver(ods ODS "GDAL_USE_EXPAT")
-ogr_dependent_driver(ogdi "OGDI" "GDAL_USE_OGDI")
-ogr_dependent_driver(lvbag "LVBAG" "GDAL_USE_EXPAT")
-ogr_dependent_driver(hana "SAP HANA" "GDAL_USE_ODBCCPP;GDAL_USE_ODBC")
 
 # Add generic in last line
 add_subdirectory(generic)
